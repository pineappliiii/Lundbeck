),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)))
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used,fill = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
tool_table <- as.data.frame(table(filtered_data()$tools_used))
colnames(tool_table) <- c("Tools Used", "Number")
tool_table
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed,fill = biome)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlotly({
req(nrow(filtered_data()) > 0)
plot_ly(
filtered_data(), x = ~coordinates_x, y = ~coordinates_y, z = ~coordinates_z,
type = "scatter3d", mode = "markers", marker = list(size = 3, color = 'skyblue')
) %>%
layout(title = "Player 3D Position",
scene = list(xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
zaxis = list(title = "Z Coordinate")))
})
output$picture <- renderImage({
list(src= "picture.jpg", height = "80%", width= "100%")
}, deleteFile = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
# Define UI
ui <- fluidPage(
fluidPage(
# Insert a static image at the top
fluidPage(imageOutput("picture", height = "700px", width = "100%"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)))
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used,fill = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
tool_table <- as.data.frame(table(filtered_data()$tools_used))
colnames(tool_table) <- c("Tools Used", "Number")
tool_table
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed,fill = biome)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlotly({
req(nrow(filtered_data()) > 0)
plot_ly(
filtered_data(), x = ~coordinates_x, y = ~coordinates_y, z = ~coordinates_z,
type = "scatter3d", mode = "markers", marker = list(size = 3, color = 'skyblue')
) %>%
layout(title = "Player 3D Position",
scene = list(xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
zaxis = list(title = "Z Coordinate")))
})
output$picture <- renderImage({
list(src= "picture.jpg", height = "80%", width= "100%")
}, deleteFile = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
# Define UI
ui <- fluidPage(
fluidPage(
# Insert a static image at the top
fluidPage(imageOutput("picture", height = "700px", width = "100%"),
tags$head(tags$style(HTML("body {background-color: #f4f4f4;}
.title {text-align: center; font-size: 30px; font-weight: bold; color: #4CAF50;}
.panel {background-color: white; padding: 15px; border-radius: 10px; box-shadow: 2px 2px 10px gray;}
.shiny-input-container {margin-bottom: 15px;}"))),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)))
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used,fill = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
tool_table <- as.data.frame(table(filtered_data()$tools_used))
colnames(tool_table) <- c("Tools Used", "Number")
tool_table
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed,fill = biome)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlotly({
req(nrow(filtered_data()) > 0)
plot_ly(
filtered_data(), x = ~coordinates_x, y = ~coordinates_y, z = ~coordinates_z,
type = "scatter3d", mode = "markers", marker = list(size = 3, color = 'skyblue')
) %>%
layout(title = "Player 3D Position",
scene = list(xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
zaxis = list(title = "Z Coordinate")))
})
output$picture <- renderImage({
list(src= "picture.jpg", height = "80%", width= "100%")
}, deleteFile = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
# Define UI
ui <- fluidPage(
fluidPage(
# Insert a static image at the top
fluidPage(imageOutput("picture", height = "700px", width = "100%"),
tags$head(tags$style(HTML("body {background-color: #f4f4f4;}
.title {text-align: center; font-size: 30px; font-weight: bold; color: #4CAF50;}
.panel {background-color: white; padding: 15px; border-radius: 10px; box-shadow: 2px 2px 10px gray;}
.shiny-input-container {margin-bottom: 15px;}"))),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)))
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used,fill = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
tool_table <- as.data.frame(table(filtered_data()$tools_used))
colnames(tool_table) <- c("Tools Used", "Number")
tool_table <- tool_table[order(-tool_table$Number),]
if (nrow(tool_table) == 0) return(data.frame("Tools Used" = "No Data", "Number" = 0))
tool_table
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed,fill = biome)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlotly({
req(nrow(filtered_data()) > 0)
plot_ly(
filtered_data(), x = ~coordinates_x, y = ~coordinates_y, z = ~coordinates_z,
type = "scatter3d", mode = "markers", marker = list(size = 3, color = 'skyblue')
) %>%
layout(title = "Player 3D Position",
scene = list(xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
zaxis = list(title = "Z Coordinate")))
})
output$picture <- renderImage({
list(src= "picture.jpg", height = "80%", width= "100%")
}, deleteFile = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(janitor)
library(skimr)
library(naniar)
setwd("~/Desktop")
setwd("~/Desktop/Lundbeck")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(tidyverse)
library(janitor)
library(skimr)
library(naniar)
library(tidyverse)
library(janitor)
library(skimr)
library(naniar)
